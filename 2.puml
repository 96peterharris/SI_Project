@startuml
class graphStructure.Edge {
- Vertex firstVertex
- Vertex secondVertex
- StackPane colorLabel
- long id
- long color
- IntVar solverVar
+ <<Create>> Edge(Vertex,Vertex)
+ <<Create>> Edge(Vertex,Vertex,StackPane,long)
+ <<Create>> Edge(Vertex,Vertex,StackPane,long,long)
+ <<Create>> Edge(Vertex,Vertex,long,StackPane,long)
+ long getId()
+ void setId(long)
+ IntVar getSolverVar()
+ void setSolverVar(IntVar)
+ Vertex getFirstVertex()
+ void setFirstVertex(Vertex)
+ Vertex getSecondVertex()
+ void setSecondVertex(Vertex)
+ StackPane getColorLabel()
+ void setColorLabel(StackPane)
+ long getColor()
+ void setColor(long)
+ long getColorFromVar()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class graphStructure.Vertex {
- String name
- long id
- String label
- StackPane dot
- IntVar solverVar
+ <<Create>> Vertex()
+ <<Create>> Vertex(String,long,StackPane)
+ IntVar getSolverVar()
+ void setSolverVar(IntVar)
+ String getName()
+ void setName(String)
+ long getId()
+ void setId(long)
+ StackPane getDot()
+ void setDot(StackPane)
+ String getLabel()
+ void setLabel(String)
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}
class graphStructure.Graph {
- LinkedHashSet<Vertex> vertices
- LinkedHashSet<Edge> edges
+ <<Create>> Graph()
+ LinkedHashSet<Vertex> getVertices()
+ void setVertices(LinkedHashSet<Vertex>)
+ LinkedHashSet<Edge> getEdges()
+ void setEdges(LinkedHashSet<Edge>)
+ void addEdge(String,String)
- void addEdge(String,String,long)
+ void addEdgeExample(String,String,long)
+ boolean findEdgeBool(String,String)
+ void deleteEdge(String,String)
+ StackPane addVertex()
+ void addVertexRand()
- void addVertexRand(long,String,String)
- Vertex findVertex(String)
+ boolean findVertexBool(String)
+ void deleteVertex(String)
+ Edge getLastEdge()
+ void clearGraph()
- int randInt(int,int)
+ void randGraph()
- ArrayList<HashMap<String,String>> verticesToArrOfMap()
- ArrayList<HashMap<String,String>> edgesToArrOfMap()
+ HashMap<String,ArrayList<HashMap<String,String>>> graphToMap()
+ void graphFromMap(HashMap<String,ArrayList<HashMap<String,String>>>)
+ List<Edge> getConnectedEdges(String)
}
@enduml